plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.9.20'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    mavenCentral()
}

def projectVersion = project.version

dependencies {
    jacocoAggregation project(':treelock-core')
    jacocoAggregation project(':treelock-jdbc')
    jacocoAggregation project(':treelock-spring')
}

reporting {
    reports {
        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}

subprojects {

    apply plugin: "kotlin"
    apply plugin: "groovy"
    apply plugin: "jacoco"
    apply plugin: 'maven-publish'

    project.group = 'dev.vavelin.treelock'
    project.version = projectVersion

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

        testImplementation "org.apache.groovy:groovy-all:4.0.17"
        testImplementation "org.spockframework:spock-core:2.4-M1-groovy-4.0"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.1"
        testImplementation "net.bytebuddy:byte-buddy:1.14.11"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.1"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    jacoco {
        toolVersion = "0.8.11"
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.outputLocation = layout.buildDirectory.dir("jacoco-html")
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
                includes = ["$project.group.*"]
            }

            rule {
                element = 'METHOD'
                limit {
                    counter = 'LINE'
                    value = 'TOTALCOUNT'
                    maximum = 25
                }
                includes = ["$project.group.*"]
            }

            rule {
                element = 'METHOD'
                limit {
                    counter = 'BRANCH'
                    value = 'TOTALCOUNT'
                    maximum = 4
                }
                includes = ["$project.group.*"]
            }

        }
    }

    jar {
        manifest {
            attributes(
                    "Name": "${project.group} - ${project.name}",
                    "Implementation-Title": project.name,
                    "Implementation-Version": projectVersion,
                    "Implementation-Vendor": "Przemyslaw Malirz (pmalirz) - Vavelin.dev")
        }
    }

}
